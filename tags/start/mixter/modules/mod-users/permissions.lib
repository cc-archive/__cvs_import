<?
// ----------------------------
// Matthew Drake and Ian Spivey
// Mixter Website
// 6.171
// madrake@mit.edu, ispivey@mit.edu
// ----------------------------
// Page: permissions.lib
// Purpose: Functions related to who has permissions to do what
// ----------------------------

// Pre: Takes $username which is a valid username, and $unencrypted_password. $username
// must exist in the system.
// which is the password the user tried to use to get access to the system.
// Post: Sets up the session variables that give access and returns a string, one of
// "banned", "badpassword", or "ok"
function validateUserLogin($username, $unencrypted_password) {
  session_start();
  $querystring = "SELECT user_name, password, role, banned FROM users WHERE user_name='$username'";
  $user = query_one_row($querystring);
  if ($user->banned == "t") {
    return "banned";
  } else {
    if (sha1($unencrypted_password) == $user->password) {
      $_SESSION['user'] = $username;      
      if ($user->role == "admin" || $user->role == "superadmin") {
        $_SESSION['admin'] = "butt"; // This is funny at 4 in the morning
      }
      if ($user->role == "superadmin") {
	$_SESSION['superadmin'] = "butt";
      }
      return "ok";
    } else {
      return "badpassword";
    }
  }
}

// Pre: Takes $username which is a valid username, and $unencrypted_password. $username
// must exist in the system.
// which is the password the user tried to use to get access to the system.
// Post: Returns "badpassword" or "ok" or "banned" as appropriate.
function users_validPassword($username, $unencrypted_password) { 
  session_start();
  $querystring = "SELECT user_name, password FROM users WHERE user_name='$username'";
  $user = query_one_row($querystring);
  if ($user->banned == "t") {
    return "banned";
  } else {
    if (sha1($unencrypted_password) == $user->password) {
      return "ok";
    } else {
      return "badpassword";
    }
  }
}

// Pre: No headers have been sent
// Post: Logs a user out.
function validateUserLogout() {
  session_start();
  session_unset();
  session_destroy();
}

// Pre: Requires that a session has already been started
// Post: Returns whether the user is logged in as administrator or not
function users_isAdmin() {
  return isset($_SESSION['admin']);
}

// Pre: Requires that a session has already been started
// Post: Returns whether the user is logged in or not
function users_isLoggedIn() {
  return isset($_SESSION['user']);
}