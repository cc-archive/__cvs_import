<?
// ----------------------------
// Matthew Drake and Ian Spivey
// Mixter Website
// 6.171
// madrake@mit.edu, ispivey@mit.edu
// ----------------------------
// Page: article.lib
// Purpose: All the functions to display articles.
// ----------------------------

require_once("../modules/mod-utilities/page-layout.lib");
require_once("../modules/mod-utilities/database.lib");
require_once("../modules/mod-utilities/user-input.lib");

// Pre: Takes a valid article object that was generated by the functions
//      in this library.
// Post: Returns an array of variable->value mappings that can be passed to
//       evalTemplate to generate HTML code for an article.

function internal_generate_article_template_data($article) {
  $title = unstripTags($article->one_line_summary);
  $author = unstripTags($article->user_name);
  $author_id = $article->user_id;
  $authorlink = "user-profile?user_id=" . $author_id;
  $date = formatDate(unstripTags($article->creation_date));
  $body = unstripTags($article->body);
  $body = convertLineBreaks($body);
  return compact("title","author","date","body", "authorlink");
}

// Pre: Takes a valid article object that was generated by the functions
//      in this library.
// Post: Returns an array of variable->value mappings that can be passed to
//       evalTemplate to generate HTML code for an article summary.

function internal_generate_article_summary_template_data($article) {
  $title = unstripTags($article->one_line_summary);
  $author = unstripTags($article->user_name);
  $creator = $author;
  $creator_id = $article->user_id;
  $content_type = 'Article';
  $date = formatDate(unstripTags($article->creation_date));
  $creation_date = $date;
  $description = unstripTags($article->description);
  $summary = $description;
  $article_link = "view-article?article_id=" . $article->content_id;
  $title = createLink($article_link, $title);
  return compact("title","author","date","description","article_link", "creator", "creator_id", "content_type", "creation_date", "summary");
}

// Pre: Takes a valid article object that was generated by the functions
//      in this library.
// Post: Returns an array of variable->value mappings that can be passed to
//       evalTemplate to generate HTML code for an admin's view of an 
//       article, complete with moderation functionality.

function internal_generate_article_admin_view_data($article) {
  $title = unstripTags($article->one_line_summary);
  $author_id = $article->user_id;
  $authorlink = "user-profile?user_id=" . $author_id;
  $author = unstripTags($article->user_name);
  $date = formatDate(unstripTags($article->creation_date));
  $body = unstripTags($article->body);
  $body = convertLineBreaks($body);
  $approve_link = "admin-view-article-submit?article_id=$article->content_id"
                  ."&edit=approve";
  $reject_link = "admin-view-article-submit?article_id=$article->content_id"
                  ."&edit=reject";
  $back_link = "view-multiple-articles";
  return compact("title","author","date","description","approve_link","reject_link","back_link","body", "authorlink");
}

// Pre: Takes a multirow object containing articles generated by the functions
//      in this library.
// Post: Returns an array of variable->value mappings that can be passed to
//       evalTemplate to generate HTML code for a list of articles.

function internal_generate_multiple_article_view_data($articles) {
  $item_string = "";
  while ($article = get_row_from_multi_row($articles)) {
    $item_string .= content_generate_article_summary($article);
  }
  return compact("item_string");
}

// Pre: Takes a valid article object generated by the functions in this
// library.
// Post: Returns a string containing HTML code that will display the article.

function content_generate_article_view($article) {
  $template_variables = internal_generate_article_template_data($article);
  return evalTemplate("mod-content/article.template", $template_variables);
}

// Pre: Takes a valid article object generated by the functions in this
// library.
// Post: Returns a string containing HTML code that will display the article
// summary.

function content_generate_article_summary($article) {
  $template_variables = internal_generate_article_summary_template_data($article);
//  return evalTemplate("mod-content/article-summary.template", $template_variables);
  return evalTemplate("mod-content/recent-content-item.template", $template_variables);
}

// Pre: Takes a valid article object generated by the functions in this
// library.
// Post: Returns a string containing HTML code that will display the
// administrative view of the article.

function content_generate_article_admin_view($article) {
  $template_variables = internal_generate_article_admin_view_data($article);
  return evalTemplate("mod-content/article-admin.template", $template_variables);
}

// Pre: Takes a multirow object of articles generated by the functions in this
// library.
// Post: Returns a string containing HTML code that will display the articles.

function content_generate_multiple_article_view($articles) {
  $template_variables = internal_generate_multiple_article_view_data($articles);
//  return evalTemplate("mod-content/multiple-article-view.template", $template_variables);
  return evalTemplate("mod-content/recent-content.template", $template_variables);
}

// Pre: None.
// Post: Returns an article object corresponding to the most recently submitted
// unmoderated article, or false if there are none.

function content_get_next_unmoderated_article() {
  $querystring = "
    SELECT * FROM content_raw, content_versions
    WHERE content_raw.content_id=content_versions.content_id
      AND editorial_status='submitted'
      AND content_type='article'
    ORDER BY creation_date DESC";
  $article = query_one_row($querystring);
  return $article;
}

// Pre: Num is an integer.
// Post: Returns a multirow object containing articles, to be handled using
// functions in this library.

function content_get_last_n_articles($num) {
  $querystring = 
  "SELECT * FROM content_raw, users, live_versions
   WHERE content_raw.content_type='article'
    AND live_versions.content_id=content_raw.content_id
    AND users.user_id=content_raw.creation_user
    AND live_versions.editorial_status='approved'
  ORDER BY creation_date DESC
   LIMIT $num";
  $results = query_multi_row($querystring);
  return $results;
}

// Pre: $content_id corresponds to a valid approved article in the database
// Post: returns an object representing the specified article, or
//      FALSE is there is an error getting the object

function content_get_article($content_id) {
	$original_content_id = $content_id;
	$content_id = addslashes($content_id);
	$querystring = 
	"SELECT * FROM content_raw, users, live_versions 
	 WHERE content_raw.content_id='$content_id' 
	   AND live_versions.content_id=content_raw.content_id
	   AND content_raw.content_type='article'
           AND users.user_id=content_raw.creation_user";
	$article = query_one_row($querystring);
	return $article;
}

// Pre: $content_id corresponds to a valid article in the database
// Post: returns an object representing the specified article, or
//      FALSE is there is an error getting the object

function content_get_any_article($content_id) {
	$original_content_id = $content_id;
	$content_id = addslashes($content_id);
	$querystring = 
	"SELECT * FROM content_raw, content_versions, users
	 WHERE content_raw.content_id='$content_id' 
	   AND content_versions.content_id=content_raw.content_id
	   AND content_raw.content_type='article'
           AND users.user_id=content_raw.creation_user";
	$article = query_one_row($querystring);
	return $article;
}

// Pre: $body is a string of SQL-safe text.
//      $refers_to is an integer corresponding to the content_id of a piece of
//      content in the database, or NULL.
//      $creation_user is an integer corresponding to the user_id of the user
//      who created this article
//      $viewable_state is a string, either "private" or "public" or NULL.
//      $license is a URL to a valid Creative Commons license, or NULL.
//      $one_line_summary is a string representing the title of the article of
//      length <= 100 chars.
//      $description is a string describing the article, of length <= 300
//      chars.
//      $language is a two-letter ISO language code indicated the language of
//      the article.
// Post: Attempts to add the article to the database.  Returns true if
// successful, and false otherwise.

function content_add_new_article($body, $refers_to, $creation_user, $viewable_status, $license_name, $license_url, $one_line_summary, $description, $language) {

//  $refers_to = NULL;
  $creation_date = date("Y-m-d H:i:s");
  $content_type = "article";
  $mime_type = "text/plain";
  $editorial_status = "submitted";
  $editorial_status_date = $creation_date;
  $current_version_p = "t";
  $editor_id = $creation_user;
  $querystring1 = "INSERT INTO content_raw (content_type, creation_user, creation_date, mime_type, viewable_status, license_name, license_url) ".
  	"VALUES ('$content_type','$creation_user','$creation_date','$mime_type','$viewable_status','$license_name','$license_url');";
  if(!query_perform($querystring1)) {
	display_error("Could not add new article to the database.");
	return false;
  }
  
  $getcurrval = "SELECT currval('content_raw_content_id_seq');";
  $currval = query_one_val($getcurrval);

  $querystring2 = "INSERT INTO content_versions (content_id, version_date, language, one_line_summary, body, editor_id, editorial_status, editorial_status_date, current_version_p, description) ".
  	"VALUES ('$currval','$creation_date','$language','$one_line_summary','$body','$editor_id','$editorial_status','$editorial_status_date','$current_version_p', '$description')";
  
  if(!query_perform($querystring2)) {
	display_error("Could not add new article to the database.");
	return false;
  } else {
	return true;
  }

}

// Pre: $editor_id is the id of a user
//      $content_id is the id of a piece of content in the database
//      $new_status is either "approved", "rejected", "expired", or "submitted"
// Post: Attempts to change the editorial status of the object to
// $editorial_version; returns true if successful, false otherwise.

function content_change_article_editorial_status($editor_id, $content_id, $new_status) {

  $querystring = "
  UPDATE content_versions 
  SET editorial_status='$new_status', editor_id='$editor_id'
  WHERE content_id='$content_id'";
  if(!query_perform($querystring)) {
	display_error("Error updating editorial status of article.");
	return false;
  }
  return true;
}

// Pre: $article is a valid article object
// Post: returns the content_id integer corresponding to $article

function content_get_id_of_article($article) {
  return $article->content_id;
}

// Pre: $article_id corresponds to a valid article in the database.
// Post: returns HTML code to display the admin options for the article.

function content_generate_article_admin_options($article) {
  
}

?>
