<?
// ----------------------------
// Matthew Drake and Ian Spivey
// Mixter Website
// 6.171
// madrake@mit.edu, ispivey@mit.edu
// ----------------------------
// Page: content-search.lib
// Purpose: Performs searches on the content module.
// ----------------------------

require_once("../modules/mod-utilities/database.lib");
require_once("../modules/mod-utilities/user-input.lib");

// Pre: $query is a valid querystring
// Post: Searches for possible matches to the querystring and returns a set of search results. Search is for songs
// relating to query.
function content_searchContentSongs($query) {
  $pattern = "/\s+/i";
  $replacement = "|";
  $query = preg_replace($pattern, $replacement, $query);
  if(substr($query, -1) == '|')
    $query = substr($query, 0, -1);
  if(substr($query, 0, 1) == '|')
    $query = substr($query, 1);
  $querystring = "
  SELECT *, 
         rank(content_versions.idxFTI, to_tsquery('default', '$query')) AS therank
  FROM content_versions, content_raw, users
  WHERE content_versions.idxFTI @@ to_tsquery('default', '$query')
    AND current_version_p='t'
    AND (editorial_status='approved' OR editorial_status='submitted')
    AND content_versions.content_id = content_raw.content_id
    AND content_type = 'music'
    AND users.user_id = content_raw.creation_user
  ORDER BY therank DESC
  LIMIT 100";
  if ($query != '') {
    $results = query_multi_row($querystring);
    while ($result = get_row_from_multi_row($results)) {
      $name = unstripTags($result->one_line_summary);
      $artist = unstripTags($result->user_name);
      $description = unstripTags($result->description);
      $link = "view-music?music_id=" . $result->content_id;
      $return_results[] = compact("name","artist","description","link"); 
    }
  }
  return $return_results;
}

// Pre: $query is a valid querystring
// Post: Searches for possible matches to the querystring and returns a set of search results. Search is for information
// relating to query.
function content_searchContentInfo($query) {
  $pattern = "/\s+/i";
  $replacement = "|";
  $query = preg_replace($pattern, $replacement, $query);
  if (substr($query, -1) == '|')
    $query = substr($query, 0, -1);
  if (substr($query, 0, 1) == '|')
    $query = substr($query, 1);
  $querystring = "SELECT *, rank(content_versions.idxFTI, to_tsquery('default', '$query')) AS therank 
			FROM content_versions, content_raw
			WHERE content_versions.idxFTI @@ to_tsquery('default', '$query')
			AND current_version_p='t'
			AND (editorial_status='submitted' OR editorial_status='approved')
			AND content_versions.content_id=content_raw.content_id 
			AND (content_type = 'article' OR content_type = 'news' OR 
			     content_type = 'forum_posting' OR content_type = 'forum')
			ORDER BY therank DESC
			LIMIT 100";
  if ($query != '') {
  $results = query_multi_row($querystring);
  while ($result = get_row_from_multi_row($results)) {
    $name = unstripTags($result->one_line_summary);
    $creator = $result->creation_user;
    switch ($result->content_type) {
      case 'forum_posting':
        $description = unstripTags(substr($result->body, 0, 400)) . "......";
        if (isForum($result->refers_to)) {
          $forum_object = content_getForum($result->refers_to);
          $link = "forums-specific-thread.php?view_forum=" . $forum_object->content_id . "&f_id=" . $result->content_id;
        } else {
          $thread_object = content_getPosting($result->refers_to);
          $forum_object = content_getForum($thread_object->refers_to);
          $link = "forums-specific-thread.php?view_forum=" . $forum_object->content_id . "&f_id=" . $thread_object->content_id
		  . "#" . $result->content_id;
        }
        $type = "forum posting";
        break;
      case 'forum':
        $description = unstripTags($result->description);
        $link = "forums-specific-forum.php?view_forum=" . $result->content_id;
        $type = "forum";
        $creator = "none";
        break;
      case 'article':
        $description = unstripTags($result->description);
        $link = "view-article?article_id=" . $result->content_id;
        $type = "article";
        break;
      case 'music':
        $description = unstripTags($result->description);
        $link = "view-music?music_id=" . $result->content_id;
        $type = "music";
        break;
      case 'news':
	break;
    }
    $return_results[] = compact("name", "creator", "description", "link", "type", "rank");
  }
  }
  return $return_results;
}

// Pre: $n is a number of content items to be returned. 
// Post: Returns a string showing the $n most recent content items entered.
function content_getRecentContent($n) {
  $querystring = "SELECT * FROM content_raw, live_versions
	  	   WHERE content_raw.content_id=live_versions.content_id AND
		         editorial_status = 'approved' AND
			 viewable_status = 'public'
			 AND (content_type = 'article' OR
			      content_type = 'music')
 		   ORDER BY creation_date DESC
		   LIMIT " . $n;
  $results = query_multi_row($querystring);

  while ($result = get_row_from_multi_row($results)) {
    $title = unstripTags($result->one_line_summary);
    $summary = unstripTags($result->description);
    $creator_id = $result->creation_user;
    $creator = getUsername($creator_id);
    $creation_date = formatDate($result->creation_date);
    $content_link = '';
    switch($result->content_type) {
      case 'forum_posting':
	$content_type = 'Message';
        if ($result->refers_to != '' && isForum($result->refers_to)) {
          $forum_object = content_getForum($result->refers_to);
          $content_link = "forums-specific-thread.php?view_forum=" . $forum_object->content_id . "&f_id=" . $result->content_id;
        } else {
          $thread_object = content_getPosting($result->refers_to);
          $forum_object = content_getForum($thread_object->refers_to);
          $content_link = "forums-specific-thread.php?view_forum=" . $forum_object->content_id . "&f_id=" . $thread_object->content_id
          . "#" . $result->content_id;
        }
        $summary = substr(unstripTags($result->body), 0, 100) . "...";
        break;
      case 'article':
	$content_type = 'Article';
        $content_link = "view-article?article_id=" . $result->content_id;
        break;
      case 'forum':
	$content_type = 'Forum';
        $content_link = "forums-specific-forum?view_forum=" . $result->content_id;
        break;
      case 'music':
	$content_type = 'Music';
        $content_link = "view-music?music_id=" . $result->content_id;
        break;
    }
    $title = createLink($content_link, $title);
    $template_variables = compact("title", "summary", "creator_id", "creator", "creation_date", "content_type");
    $item_string .= evalTemplate("mod-content/recent-content-item.template", $template_variables);
  }
  $template_variables = compact("item_string");
  return evalTemplate("mod-content/recent-content.template", $template_variables);
}

// Pre: $n is a number of content items to be returned.
// Post: Returns information about the $n most recent content items entered.
// This is meant for a SOAP remote procedure call.
function content_getRecentContentRPC($n) {
  // I have no intention of ever updating this code again - Matt
  $querystring = "SELECT * FROM content_raw, live_versions
	  	   WHERE content_raw.content_id=live_versions.content_id AND
		         editorial_status = 'approved'
 		   ORDER BY creation_date DESC
		   LIMIT " . $n;
  $results = query_multi_row($querystring);
  
  while ($result = get_row_from_multi_row($results)) {
    $title = unstripTags($result->one_line_summary);
    $summary = unstripTags($result->description);
    $creator = getUsername($creator_id);
    $creation_date = formatDate($result->creation_date);
    $content_type = $result->content_type;
    $record[] = compact("title", "summary", "creator", "creation_date", "content_type");
  }

  return $record;
}
