<?
// --------------------------
// Matthew Drake and Ian Spivey
// Mixter Website
// 6.171
// madrake@mit.edu, ispivey@mit.edu
// ----------------------------
// Page: music.lib
// Purpose: All the functions to display, add, administrate music.
// ----------------------------

require_once("../modules/mod-utilities/page-layout.lib");
require_once("../modules/mod-utilities/database.lib");

// Pre: content_id corresponds to a valid approved music file in the database
// Post: returns an object representing the specified article, or FALSE if there
//       is an error getting the object

function content_get_music($content_id) {
	$original_content_id = $content_id;
	$content_id = addslashes($content_id);
	$querystring = 
	"SELECT * FROM content_raw, content_versions, users
	 WHERE content_raw.content_id = '$content_id'
	   AND content_versions.content_id = content_raw.content_id
	   AND (editorial_status = 'approved' OR editorial_status = 'submitted')
	   AND content_raw.content_type = 'music'
	   AND content_raw.creation_user = users.user_id";
	$music = query_one_row($querystring);
	return $music;
}


// Pre: content_id corresponds to a valid music file in the database
// Post: returns an object representing the specified article, or FALSE if there
//       is an error getting the object

// BUGGY right now, as it doesn't handle versioning properly

function content_get_any_music($content_id) {
	$original_content_id = $content_id;
        $content_id = addslashes($content_id);
        $querystring =
        "SELECT * FROM content_raw, content_versions, users
         WHERE content_raw.content_id = '$content_id'
	   AND content_versions.content_id = content_raw.content_id
           AND content_raw.content_type = 'music'
           AND content_raw.creation_user = users.user_id";
        $music = query_one_row($querystring);
        return $music;
}

// Pre: artist_id corresponds to a valid user in the database
// Post: returns a multirow object containing music objects which can be
// passed to other functions in this library.

function content_get_all_music_by_artist($artist_id) {
  $querystring = "
  SELECT * FROM content_raw, users, content_versions
  WHERE users.user_id=$artist_id
    AND content_raw.content_type='music'
    AND content_versions.content_id=content_raw.content_id
    AND users.user_id=content_raw.creation_user
    AND (editorial_status='approved' OR editorial_status='submitted')
  ORDER BY creation_date DESC";
  $results = query_multi_row($querystring);
  return $results;
}


// Pre: artist_id corresponds to a valid user in the database, num is an
// integer
// Post: returns a multirow object containing music objects which can be
// passed to other functions in this library.

function content_get_n_music_by_artist($artist_id, $num) {
  $querystring = "
  SELECT * FROM content_raw, users, content_versions
  WHERE users.user_id=$artist_id
    AND content_raw.content_type='music'
    AND content_versions.content_id=content_raw.content_id
    AND users.user_id=content_raw.creation_user
    AND (editorial_status='approved' OR editorial_status='submitted')
  ORDER BY creation_date DESC
    LIMIT $num";
  $results = query_multi_row($querystring);
  return $results;
}

// Pre: $group_id corresponds to a valid group in the database
// Post: Returns a multirow object containing music objects which can be passed
// to other functions in this library.

function content_get_all_music_by_group($group_id) {
  $querystring = "
  SELECT content_raw.*, content_versions.*, group_id, group_name AS user_name 
    FROM content_raw, content_versions, user_groups
  WHERE refer_to=$group_id
    AND content_raw.content_type='music'
    AND content_versions.content_id=content_raw.content_id
    AND user_groups.group_id='$group_id'
    AND (editorial_status='approved' OR editorial_status='submitted')
  ORDER BY creation_date DESC";
  $results = query_multi_row($querystring);
  return $results;
}

// Pre: $group_id corresponds to a valid group in the database, $num is an
// integer
// Post: Returns a multirow object containing music objects which can be passed
// to other functions in the library

function content_get_n_music_by_group($group_id, $num) {
  $querystring = "
  SELECT content_raw.*, content_versions.*, group_id, group_name AS user_name 
    FROM content_raw, content_versions, user_groups
  WHERE refer_to=$group_id
    AND content_raw.content_type='music'
    AND content_versions.content_id=content_raw.content_id
    AND user_groups.group_id='$group_id'
    AND (editorial_status='approved' OR editorial_status='submitted')
  ORDER BY creation_date DESC
  LIMIT $num";
  $results = query_multi_row($querystring);
  return $results;
}

// Pre: num is an integer.
// Post: Returns a multirow object containing music objects which can be passed
// to other functions in this library.

function content_get_last_n_music($num) {
  $querystring = "
  SELECT * FROM content_raw, users, content_versions
  WHERE content_raw.content_type='music'
    AND content_versions.content_id=content_raw.content_id
    AND users.user_id=content_raw.creation_user
    AND (editorial_status='approved' OR editorial_status='submitted')
  ORDER BY creation_date DESC
    LIMIT $num";
  $results = query_multi_row($querystring);
  return $results;
}

// Pre: $body is a string of SQL-safe text.
//      $refers_to is an integer corresponding to the content_id of a piece of
//      content in the database, or NULL.
//      $creation_user is an integer corresponding to the user_id of the user
//      who created this article
//      $viewable_state is a string, either "private" or "public" or NULL.
//      $license is a URL to a valid Creative Commons license, or NULL.
//      $one_line_summary is a string representing the title of the music of
//      length <= 100 chars.
//      $description is a string describing the music, of length <= 300
//      chars.
//      $language is a two-letter ISO language code indicated the language of
//      the music.
//      $filename is the name of the file as it will be downloaded, eg
//      "example.mp3".
//      $temp_file is the location of the uploaded file on the server, as
//      obtained from $_FILES['userfile']['tmp_name'], that is used to store
//      the file on the disk.
// Post: Attempts to add the music to the database.  Returns content_id if
// successful, and false otherwise.

function content_add_new_music( $refers_to, $creation_user, $viewable_status, $license_name, $license_url, $one_line_summary, $description, $language, $filename, $mime_type, $temp_file) {
        require_once("../modules/mod-users/users-interface.php");
        $creation_user_name = getUsername($creation_user);
	$storagename = $GLOBALS['content_root'] . $creation_user_name . $one_line_summary . ".dat"; // NOTE - Add code later so can't upload same file twice.
        if($refers_to == '') $refers_to_string = 'NULL';
        else $refers_to_string = '\'$refers_to\'';
	if (!move_uploaded_file($temp_file, $storagename)) return FALSE;
	// filename_short should be blah.mp3; needs truncating

	$creation_date = date("Y-m-d H:i:s");
	$content_type = "music";
	$editorial_status = "submitted";
	$editorial_status_date = $creation_date;
	$version_date = $creation_date;
	$current_version_p = "t";
	$editor_id = $creation_user;
        $songname = $one_line_summary;
	$querystring1 = "
 	INSERT INTO content_raw (
        refers_to,
	content_type,
	creation_user,
	creation_date,
	mime_type,
	viewable_status,
        license_name,
        license_url,
	filename)
	VALUES (
        $refers_to_string,
	'$content_type',
	'$creation_user',
	'$creation_date',
	'$mime_type',
	'$viewable_status',
        '$license_name',
        '$license_url',
	'$filename')";
	
	if (!query_perform($querystring1))
	  return false;

	$currval = query_one_val("SELECT currval('content_raw_content_id_seq')");

	$querystring2 = "
	INSERT INTO content_versions (
	content_id,
	version_date,
	language,
	one_line_summary,
	description,
	body,
	editor_id,
	editorial_status,
	editorial_status_date,
        storagename,
	current_version_p)
	VALUES (
	'$currval',
	'$version_date',
	'$language',
	'$one_line_summary',
	'$description',
	'$body',
	'$editor_id',
	'$editorial_status',
	'$editorial_status_date',
        '$storagename',
	'$current_version_p')";

	if(!query_perform($querystring2)) return FALSE;
	else
	return $currval;
}

// Pre: $new_song is the id of the song doing the mixing/sampling, and
// $remixed_song is the id of the song being remixed/sampled.  They both
// correspond to valid music objects in the database.
// Post: Returns true if the relation was successfully added to the database,
// and false otherwise.

function content_add_remix($new_song, $remixed_song) {
  $querystring = "
  INSERT INTO music_mapping (
  original_music,
  derivative_music)
  VALUES (
  '$remixed_song',
  '$new_song')";

  return query_perform($querystring);
}

//Pre: $music_id corresponds to a valid music object in the database.
//Post: Returns a multi-row object containing music objects corresponding to
//the music that remixed the piece specified by $music_id

function content_get_remixes_of($music_id) {
  $querystring = "
  SELECT * FROM content_raw, content_versions, users, music_mapping
  WHERE music_mapping.original_music='$music_id'
    AND content_raw.content_id=music_mapping.derivative_music
    AND content_versions.content_id=content_raw.content_id
    AND (editorial_status='submitted' OR editorial_status='approved')
    AND content_raw.creation_user=users.user_id";
  return query_multi_row($querystring);
}

// Pre: $music_id corresponds to a valid music object in the database
// Post: Returns a multi-row object containing music objects corresponding to
// the music that $music_id remixes.

function content_get_music_remixed_by($music_id) {
  $querystring = "
  SELECT * FROM content_raw, content_versions, users, music_mapping
  WHERE music_mapping.derivative_music='$music_id'
    AND content_raw.content_id=music_mapping.original_music
    AND content_versions.content_id=content_raw.content_id
    AND (editorial_status='submitted' OR editorial_status='approved')
    AND content_raw.creation_user=users.user_id";
  return query_multi_row($querystring);
}

// Pre: $music is a valid music object generated by this library.
// Post: Returns the user id of the creator of this content.

function content_get_artist_of_music($music) {
  return $music->user_id;
}

// Pre: None.
// Post: Returns the music object corresponding to the most recently submitted
// unmoderated piece of music, or false if there is no unmoderated music.

function content_get_next_unmoderated_music() {
  $querystring = "
  SELECT * FROM content_raw, content_versions, users
  WHERE content_raw.content_id=content_versions.content_id
    AND editorial_status='submitted'
    AND content_type='music'
    AND users.user_id=content_raw.creation_user
  ORDER BY creation_date DESC";
  $music = query_one_row($querystring);
  return $music;
}

// Pre: $querystring is a safe string
// Post: Returns a multi-row object of music objects matching the search query

function content_search_music($querystring) {
  $pattern = "/\s+/i";
  $replacement = "|";
  $querystring = preg_replace($pattern, $replacement, $querystring);
  if(substr($querystring, -1) == '|')
  $querystring = substr($querystring, 0, -1);
  if(substr($querystring, 0, 1) == '|')
  $querystring = substr($querystring, 1);
                  
  $querystring = "
  SELECT *,
         rank(content_versions.idxFTI, to_tsquery('default','$querystring'))
          AS therank
  FROM content_versions, content_raw, users
  WHERE content_versions.idxFTI @@ to_tsquery('default','$querystring')
    AND current_version_p='t'
    AND (editorial_status='approved' OR editorial_status='submitted')
    AND content_versions.content_id=content_raw.content_id
    AND content_type='music'
    AND users.user_id=content_raw.creation_user
  ORDER BY therank DESC
  LIMIT 100";
  
  return query_multi_row($querystring);
}


// Pre: $music_id is the content id of a music object in the database.
// Post: returns a string containing the binary representation of the file

function content_get_music_binary_file($music_id) {
  $music = content_get_music($music_id);
  $filename = $music->storagename;
  echo "$filename";
  $handle = fopen($filename, "r");
  $contents = fread($handle, filesize($filename));
  fclose($handle);
  return $contents;
}

function content_get_music_binary_file_from_obj($music) {
  $filename = $music->storagename;
  $contents = file_get_contents($filename);
  return $contents;
}

function content_get_music_filename_from_obj($music) {
  return $music->filename;
}

function content_get_music_filesize_from_obj($music) {
  return filesize($music->storagename);
}

// Pre: Takes a valid music object that was generated by the functions in this
//      library.
// Post: Returns an array of variable->value mappings that can be passed to
//       evalTemplate to generate HTML code for a piece of music.

function internal_generate_music_template_data($music) {
  $title = unstripTags($music->one_line_summary);
  $author = unstripTags($music->user_name);
  $date = formatDate(unstripTags($music->creation_date));
  $description = unstripTags($music->description);
  $content_id = unstripTags($music->content_id);
  $download_url = "download-music?content_id=$content_id";
  $author_url = "user-profile?user_id=$music->creation_user";
  $license_url = unstripTags($music->license_url);
  $license_name = unstripTags($music->license_name);
  $remix_url = "music-remix?music_id=" . $content_id . "&depth=1";
  return compact("title","author","date","description","download_url","author_url", "license_url", "license_name", "remix_url");
}

// Pre: Takes a valid music object that was generated by the functions in this
// libarary.
// Post: Returns an array of variable->value mappings that can be passed to
// evalTemplate to generate HTML code for a piece of music.

function internal_generate_music_admin_view_template_data($music) {
  $title = unstripTags($music->one_line_summary);
  $author = unstripTags($music->user_name);
  $date = formatDate(unstripTags($music->creation_date));
  $description = unstripTags($music->description);
  $content_id = unstripTags($music->content_id);
  $download_url = "download-music?content_id=$content_id";
  $author_url = "user-profile?user_id=$music->creation_user";
  $approve_link = "admin-view-music-submit?music_id=$content_id&action=approved";
  $reject_link = "admin-view-music-submit?music_id=$content_id&action=rejected";
  $license_url = unstripTags($music->license_url);
  $license_name = unstripTags($music->license_name);
  $remix_url = "music-remix?music_id=" . $content_id . "&depth=1";
  return compact("title","author","date","description","download_url","author_url","approve_link","reject_link", "license_url", "license_name", "remix_url");
}

// Pre: Takes a valid music object that was generated by functions in this lib.
// Post: Returns an array of variable->value mappings that can be passed to
// evalTemplate to generate HTML code for a piece of music's summary.

function internal_generate_music_summary_template_data($music) {
  $title = unstripTags($music->one_line_summary);
  $author = unstripTags($music->user_name);
  $date = formatDate(unstripTags($music->creation_date));
  $description = unstripTags($music->description);
  $content_id = unstripTags($music->content_id);
  $view_url = "view-music?content_id=$content_id";
  $author_url = "user_profile?user_id=$music->creation_user";
  $download_url = "download-music?content_id=$content_id";
  return compact("title","author","date","description","view_url","download_url","author_url");
}

// Pre: Takes a multirow object containing music objects generated by this lib.
// Post: Returns an array of variable->value mappings that can be passed to 
// evalTemplate to generate HTML code for a list of music objects.  In this
// case, the single value returned is already a bunch of HTML.

function internal_generate_multiple_music_view_template_data($musics) {
  $music_list = "";
  while($music = get_row_from_multi_row($musics)) {
    $music_list .= internal_generate_music_list_item_view($music);
  }
  return compact("music_list");
}


function internal_generate_music_list_item_view($music) {
  $author = unstripTags($music->user_name);
  $title = unstripTags($music->one_line_summary);
  $description = unstripTags($music->description);
  $date = formatDate(unstripTags($music->creation_date));
  $view_url = "view-music?music_id=$music->content_id";
  $author_link = "user-profile?user_id=$music->creation_user";
  $template_variables = compact("date","author","title","view_url","author_link","description");
  return evalTemplate("mod-content/music-list-item.template",$template_variables);
}

// Pre: Takes a multirow object containing music objects generated by this lib.
// Post: Returns an array of variable->value mappings that can be passed to 
// evalTemplate to generate HTML code for a list of music objects.  In this
// case, the single value returned is already a bunch of HTML.

function internal_generate_multiple_music_view_checkboxes_template_data($musics) {
  $music_list = "";
  $i = 0;
  while($music = get_row_from_multi_row($musics)) {
    $music_list .= internal_generate_music_list_item_checkboxes_view($music);
  }
  return compact("music_list");
}

function internal_generate_music_list_item_checkboxes_view($music) {
  $author = unstripTags($music->user_name);
  $num = unstripTags($music->content_id);
  $title = unstripTags($music->one_line_summary);
  $description = unstripTags($music->description);
  $date = formatDate(unstripTags($music->creation_date));
  $view_url = "view-music?music_id=$music->content_id";
  $author_link = "user-profile?user_id=$music->creation_user";
  $template_variables = compact("date","author","title","view_url","author_link","description","num");
  return evalTemplate("mod-content/music-list-item-checkboxes.template",$template_variables);
}


// Pre: Takes a valid music object generated by this library.
// Post: Returns a string of HTML that will display a view of the music.

function content_generate_music_view($music) {
  $template_variables = internal_generate_music_template_data($music);
  return evalTemplate("mod-content/music.template",$template_variables);
}


// Pre: Takes a valid music object generated by this library.
// Post: Returns a string of HTML that will display the admin view of the music.

function content_generate_music_admin_view($music) {
  $template_variables = internal_generate_music_admin_view_template_data($music);
  return evalTemplate("mod-content/music-admin.template",$template_variables);
}

// Pre: Takes a valid music object generated by this library.
// Post: Returns a string of HTML that will display a summary of the music obj.

function content_generate_music_summary_view($music) {
  $template_variables = internal_generate_music_summary_template_data($music);
  return evalTemplate("mod-content/music-summary.template",$template_variables);
}

// Pre: Takes a multirow object of articles generated by this library.
// Post: Returns a string of HTML that will display a list of these articles.

function content_generate_multiple_music_view($musics) {
  $template_variables = internal_generate_multiple_music_view_template_data($musics);
  return evalTemplate("mod-content/multiple-music-view.template",$template_variables);
}

// Pre: Takes a multirow object of articles generated by this library.
// Post: Returns a string of HTML that will display a list of these articles.

function content_generate_multiple_music_view_checkboxes($musics) {
  $template_variables = internal_generate_multiple_music_view_checkboxes_template_data($musics);
  return evalTemplate("mod-content/multiple-music-view.template",$template_variables);
}

// Pre: $editor_id is the id of a user
//      $music_id is the id of a music object in the database
//      $new_status is either "approved","rejected","expired", or "submitted"
// Post: Attempts to change the editorial status of the object to
// $editorial_status; returns true if successful, false otherwise.

function content_change_music_editorial_status($editor_id, $music_id, $new_status) {
  $querystring = "
  UPDATE content_versions
  SET editorial_status='$new_status',editor_id='$editor_id'
  WHERE content_id='$music_id'";
  if(!query_perform($querystring)) {
    return false;
  }
  return true;
}


?>
