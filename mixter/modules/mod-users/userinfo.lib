<?
// ----------------------------
// Matthew Drake and Ian Spivey
// Mixter Website
// 6.171
// madrake@mit.edu, ispivey@mit.edu
// ----------------------------
// Page: userinfo.lib
// Purpose: Functions that give you varius info about users in the system
// ----------------------------

require_once("../modules/mod-utilities/database.lib");
require_once("../modules/mod-utilities/assorted.lib");

// Pre: Takes $user_id, the user_id for a user on the system
// Post: Returns the object representing that user in the system.
function user_getUser($user_id) {
  $query_string = "SELECT * 
		     FROM users
		     WHERE user_id='$user_id'";
  return query_one_row($query_string);
}

// Pre: Takes $user_id which is a valid user_id, and a whole bunch of preferences about a users interests.
// Post: Updates that users preferences in the system.
function user_updateUserInterests($user_id, $interests, $favorite_music_styles, $favorite_music_groups, 
	  		          $favorite_music_songs, $about_me, $homepage, $publicemail) {
  $querystring = "UPDATE users
		    SET interests='$interests',
                        favorite_music_styles='$favorite_music_styles',
			favorite_music_groups='$favorite_music_groups',
			favorite_music_songs='$favorite_music_songs',
			about_me='$about_me',
			homepage='$homepage',
			publicemail='$publicemail'
		    WHERE
			user_id='$user_id'";
  query_perform($querystring);
}

// Pre: Takes a $userid
// Post: Returns true if the user is banned, false if he isn't.
function user_userBanned($userid) {
  $querystring = "SELECT count(user_name) FROM users WHERE user_id='$userid' AND banned=true";
  return (query_one_val($querystring));
}

// Pre: Takes a $userid, and $banned is a true or false, if the user should be banned or unbanned
// Post: Sets the users banned status according to $banned.
function user_setBannedStatus($userid, $banned) {
  $querystring = "UPDATE users SET banned=$banned WHERE user_id='$userid'";
  query_perform($querystring);
}

// Pre: Takes a $username as a string, representing some possible user on the system. $username has been
// properly escaped.
// Post: Returns true if the user is in the system, and false otherwise.
function user_userExists($username) {
  $querystring = "SELECT user_name FROM users WHERE user_name='$username'";
  return (query_one_row($querystring));
}

// Pre: Nothing
// Post: Returns the current session of a user
function user_currentUser() {
  return $_SESSION['user'];
}

// Pre: Takes a $email as a string, representing an email address in the system. $email has been 
// properly escaped.
// Post: Returns the email if it was found in the system, false otherwise.
function user_emailLookup($email) {
  $querystring = "SELECT user_name FROM users WHERE email='$email'";
  if ($user = query_one_row($querystring)) {
    return $user->user_name;
  } else {
    return false;
  }
}

// Pre: Assumes $username is a valid username in the system
// Post: Returns an array containing the following information
// "email" => The email address of the user
// "password" => The new password of the user
function user_resetPassword($username) {
  $new_password = rand(100000, 999999); // FIX THIS
  $new_password_encrypted = sha1($new_password);
  $querystring = "UPDATE users SET password='$new_password_encrypted' WHERE user_name='$username'";
  query_perform($querystring);
  $querystring = "SELECT email, user_name FROM users WHERE user_name='$username'";
  $user = query_one_row($querystring);

  return array("email" => $user->email, "password" => $new_password);
}

// Pre: $username is a user, and $unencrypted_password is the new password for a user
// Post: Sets that as the users new password
function user_setPassword($username, $unencrypted_password) {
  $new_password_encrypted = sha1($unencrypted_password);
  $querystring = "UPDATE users SET password='$new_password_encrypted' WHERE user_name='$username'";
  query_perform($querystring);
}

// Pre: Takes user data ready to insert into the database in $userinfo.
// $userinfo is an array of key value pairs storing user_name, password, given_name,
// family_name, email, phone_number, address_line_1, address_line_2, address_city,
// address_state, address_postal_code, address_country_code, date_joined, and gender
// password should not be encrypted when passed in.
// Post: Inserts the user into the database.
function user_insertUser($userinfo) {
  extract($userinfo);
  $password_encrypted = sha1($password_unencrypted);
  $querystring = "INSERT INTO users (user_name, password, given_name, family_name, " .
                 "email, phone_number, address_line_1, address_line_2, address_city, address_state, " .
                 "address_postal_code, address_country_code, date_joined, gender) VALUES ('$username', " .
                 "'$password_encrypted', '$given_name', '$family_name', '$email', '$phone_number', " .
                 "'$address1', '$address2', '$city', '$state', '$zip', '$country', '$date_joined', " . 
	         "'$gender')";
  query_perform($querystring);
}

// Pre: $user_id is a user_id for a valid user on the system
// Post: Returns that users username.
function user_getUsername($user_id) {
  $sequelquery = "SELECT user_name FROM users WHERE user_id='$user_id'";
  return query_one_val($sequelquery);
}

// Pre: $username is a valid user on the system
// Post: Returns that users user_id
function user_getUserID($username) {
  $sequelquery = "SELECT user_id FROM users WHERE user_name='$username'";
  return query_one_val($sequelquery);
}

// Pre: Takes a $user_id, corresponding to a valid user on the system
// Post: Returns a string representing that users publically viewable profile.
function user_viewProfile($user_id) {
  $querystring = "SELECT * FROM users WHERE user_id='$user_id'";
  if ($user = query_one_row($querystring)) {
    $username = $user->user_name;
  
    $given_name = $user->given_name;
    $family_name = $user->family_name;
    $email = $user->email;
    $city = $user->city;
    $state = $user->state;
    $joined = $user->date_joined;
    $gender = $user->gender;

    $interests = $user->interests;
    $favorite_music_styles = $user->favorite_music_styles;
    $favorite_music_groups = $user->favorite_music_groups;
    $favorite_music_songs = $user->favorite_music_songs;
    $about_me = $user->about_me;
    $homepage = $user->homepage;
    $publicemail = $user->publicemail;

    $profile = '';
  
    $fullname = $given_name . ' ' . $family_name;
    if ($fullname)
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "name", "value" => $fullname));
    $profile .= evalTemplate("mod-users/user-profile-row.template", 
	  		     array("property" => "member since", "value" => formatDate($joined)));
    if ($city && $state)
      $location = "$city, $state";
    else
      $location = $city . $state;
    if ($location)
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "location", "value" => $location));
    if ($gender) {
      if ($gender == 'F')
        $gender = "female";
      else
        $gender = "male";
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "gender", "value" => $gender));
    }

    if ($interests) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "interests", 
									    "value" => linkify($interests)));
    }
    if ($favorite_music_styles) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "favorite musical styles", 
									    "value" => linkify($favorite_music_styles)));
    }
    if ($favorite_music_groups) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "favorite artists and bands", 
									    "value" => linkify($favorite_music_groups)));
    }
    if ($favorite_music_songs) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "favorite songs and albums", 
									    "value" => linkify($favorite_music_songs)));
    }
    if ($about_me) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "about me", 
									    "value" => $about_me));
    }
    if ($homepage) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "Home Page", 
									    "value" => createLink($homepage, $homepage)));
    }
    if ($publicemail) {
      $profile .= evalTemplate("mod-users/user-profile-row.template", array("property" => "Public Email", 
									    "value" => obfuscate_email($email)));
    }

    return $profile;
  } else {
    return false;
  }
}
