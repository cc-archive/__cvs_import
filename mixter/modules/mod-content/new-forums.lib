<?
// ----------------------------
// Matthew Drake and Ian Spivey
// Mixter Website
// 6.171
// madrake@mit.edu, ispivey@mit.edu
// ----------------------------
// Page: forums.lib
// Purpose: The new library that provides forum access
// ----------------------------

require_once("../modules/mod-utilities/database.lib");
require_once("../modules/mod-utilities/template.lib");
require_once("../modules/mod-utilities/user-input.lib");
require_once("../modules/mod-utilities/assorted.lib");
require_once("../modules/mod-users/users-interface.php");

// Pre: Takes a $posting object, $editorial_status must be "approved" or "rejected"
// Post: Changes the editorial status of that object.
function content_EditorialAction($posting, $editorial_status) {
  $querystring = "UPDATE ONLY content_versions SET editorial_status='$editorial_status' WHERE " .
		 "version_id='" . $posting->version_id . "'";
  query_perform($querystring);
  if ($editorial_status == "rejected")
    internal_rejectSubPostings($posting);
}

// Pre: Takes a $posting object
// Post: Creates the links to approve/reject postings for that message.
function internal_adminLink($posting) {
  if (isAdmin()) {
    $content_id = $posting->content_id;
    $current_status = $posting->editorial_status;
    if ($current_status == "approved")
      $editorial_link = createLink("forum-status-submit?posting_id=$content_id&posting_action=rejected", "Reject");	
    else if ($current_status == "rejected")
      $editorial_link = createLink("forum-status-submit?posting_id=$content_id&posting_action=approved", "Approve");
    else { 
      if ($current_status == "submitted")
        $current_status = "unmoderated";
      $approve_link = createLink("forum-status-submit?posting_id=$content_id&posting_action=approved", "Approve");
      $reject_link = createLink("forum-status-submit?posting_id=$content_id&posting_action=rejected", "Reject");	
      $editorial_link = $approve_link . " or " . $reject_link;
    }

    $template_variables = compact("editorial_link", "current_status");
    return evalTemplate("mod-content/forum-admin-link.template", $template_variables);
  } else {
    return ''; 
  }
}

// Pre: Takes a $forum, which is an object representing a forum
// it should have the fields content_id.
// Post: Returns an array containing posting objects, which represent postings.
function content_retrieveAllQuestions($forum) {
  // Gets the questions out.
  if (isAdmin()) {
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' AND editorial_status != 'expired' AND " .
		   "refers_to='" . $forum->content_id . "' AND users.user_id=content_raw.creation_user ORDER BY version_date";
  } else {
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' AND editorial_status != 'rejected' AND editorial_status != 'expired' AND " .
		   "refers_to='" . $forum->content_id . "' AND users.user_id=content_raw.creation_user ORDER BY version_date";
  }
  $results = query_multi_row($querystring);
  while ($posting = get_row_from_multi_row($results)) {
    if ($posting->content_id)
      $postings[] = $posting;
  }
  if ($postings) {
    // Get the answers out - we need to see how many there are.
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' AND editorial_status != 'rejected' AND editorial_status != 'expired' " . 
		   "AND users.user_id=content_raw.creation_user AND (";
    foreach ($postings as $question) {
      $addstring[] = "refers_to='" . $question->content_id . "'";
    }
  
    $querystring .= implode(' OR ', $addstring);
    $querystring .= ") ORDER BY version_date";
    $results = query_multi_row($querystring);
    
    while ($posting = get_row_from_multi_row($results)) {
      if ($posting->content_id)
        $postings[] = $posting;
    }
  }
  return $postings;
}

// Pre: Takes $postings, an array of objects representing posts. $forum_id is the forum they are part of.
// Post: Sorts them by thread and returns a flat array.
function content_orderPostingsByThread($postings, $forum_id) {
  if ($postings) {
    foreach ($postings as $posting) {
      if ($posting->refers_to == $forum_id) {
        $sorted_questions[$posting->content_id]["question"] = $posting;
      } else {
        $sorted_questions[$posting->refers_to]["answers"][] = $posting;
      }
    }

    function helper_compare($a, $b) {
      $x = $a["question"]->version_date;
      $y = $b["question"]->version_date;
      if ($x == $y) {
        return 0;
      }
      return ($x > $y) ? -1 : 1;
    }

    usort($sorted_questions, "helper_compare");

    foreach ($sorted_questions as $question_and_answer) {
      $return_list[] = $question_and_answer["question"];
      $answers = $question_and_answer["answers"];
      if ($answers)
        foreach ($answers as $answer) {
          $return_list[] = $answer;
        }
    }
  }
  return $return_list;
}

// Pre: Takes $forum which represents a forum object.
// Post: Returns a string showing the AllThreads view for that forum.
// $sourcepage is the sourcepage that the forum gets displayed on. It should already have the "?" at the end of it.
// It should be relative to the server root.
function content_generateAllThreads($forum, $sourcepage) {
  $postings = content_retrieveAllQuestions($forum);
  return content_fillAllThreadSummaryView($forum, $postings, $sourcepage); // MATTS NOTE - DO THIS LATER
}

// Pre: Takes a $list_of_postings, which is an array of objects.
// Each object must represent an individual posting and should have
// the fields one_line_summary, creation_user, version_date, content_id, refers_to
// $forum is a forum object and should have the fields
// one_line_summary, description, and content_id
// $sourcepage is the sourcepage that the forum gets displayed on. It should already have the "?" at the end of it.
// It should be relative to the server root.
// Post: Returns a string representing the shortened thread view of a forum.
function content_fillAllThreadSummaryView($forum, $list_of_postings, $sourcepage) {
  $list_of_postings = content_orderPostingsByThread($list_of_postings, $forum->content_id);  

  $forumtitle = unstripTags($forum->one_line_summary);
  $listofthreads = '';
  if ($list_of_postings) { foreach ($list_of_postings as $posting) {
    if ($posting->refers_to == $forum->content_id) {
      // Content is a question
      $questions[$posting->content_id]["question"] = $posting;
      $questions[$posting->content_id]["answers"] = 0;
      $questions[$posting->content_id]["modified"] = $posting->creation_date;
    } else {
      // Content is an answer
      $questions[$posting->refers_to]["answers"]++;
      if ($posting->creation_date > $questions[$posting->refers_to]["modified"]) {
        $questions[$posting->refers_to]["modified"] = $posting->creation_date;
      }
    }
  }}
  
  if ($questions) {
    foreach($questions as $questionArray) {
      $question = $questionArray["question"];
      $questionlink = "$sourcepage&f_id=" . $question->content_id;
      $authorlink = "user-profile?user_id=" . $question->creation_user;
      $subject = unstripTags($question->one_line_summary);
      $author = getUsername(unstripTags($question->creation_user));
      $date = formatDate($question->version_date);
      $num_responses = $questionArray["answers"];
      if ($num_responses == 1) {
	$num_responses = "1 answer";
      } else if ($num_responses == 0) {
	$num_responses = "no answers";
      } else {
	$num_responses = $num_responses . " answers";
      }
      $last_modified = strtotime($questionArray["modified"]);
      $curtime = time();
      $timedif = $curtime - $last_modified;
      if ($timedif < 0) // In case some weird bug with the system date happens, this makes "future" posts look like the present.
	$timedif = 0;
      $timedif += 60*60*5;	
      $time_ago = date('z \d\a\y\s G \h\o\u\r\s', $timedif);
      if ($question->editorial_status == "rejected")
        $color = "BBBBBB";
      else
        $color = "EEEEEE";
      $template_variables = compact("questionlink", "subject", "authorlink", "date", "num_responses", "time_ago", "author",
				    "color");
      $listofthreads .= evalTemplate("mod-content/forum-allthreads-threadsummary.template", $template_variables);
    }
  }

  if (isLoggedIn()) {
    $newpost = evalTemplate("mod-content/forum-create-post.template", array("subjectline" => '', 
			  						  "replymessage" => "Ask New Question",
									  "refers_to" => $forum->content_id));
  } else {
    $newpost = "<TR>\n  <TD><FONT SIZE=\"3\">To Post Questions Please Login</FONT></TD>\n</TR>\n<TR>\n  <TD>" .
	       "</TD>\n<TR>\n";
  }

  $template_variables = compact("forumtitle", "listofthreads", "newpost");
  return evalTemplate("mod-content/forum-allthreads.template", $template_variables);  
}

// Pre: Takes $posting which represents a posting object.
// Post: Returns an array representing the data that both answer and question templates
// use in their evaluation
function internal_generatePostingTemplateData($posting) {
  $anchorname = $posting->content_id;
  $subject = unstripTags($posting->one_line_summary);
  $author = getUsername(unstripTags($posting->creation_user));
  $authorlink =  "user-profile?user_id=" . $posting->creation_user;
  $date = formatDate(unstripTags($posting->version_date));
  $body = unstripTags($posting->body);
  $body = convertLineBreaks($body);
  $admin_link = internal_adminLink($posting);
  $anchor_name = $posting->content_id;
  $color_clear = "#eeeeee";
  $color_blue = "#ddddff";
  $color_red = "#ffdddd";
  $color_grey = "#dddddd";
  if (isAdmin()) {
    switch ($posting->editorial_status) {
      case 'submitted':
        $bgcolor = $color_red;
        break;
      case 'rejected':
        $bgcolor = $color_grey;
        break;
      case 'approved':
        $bgcolor = $color_blue;
        break;
      case 'expired':
        $bgcolor = $color_grey;
        break;
    }
  } else {
    $bgcolor = $color_clear;
  }
  if ($posting->editorial_status == "rejected") {
    $ed_color = "BBBBBB";
  } else {
    $ed_color = "EEEEEE";
  }
  if (isForum($posting->refers_to)) {
    $forum_object = content_getForum($posting->refers_to);
    $forum = createLink("forums-specific-forum?view_forum=" . $forum_object->content_id, unstripTags($forum_object->one_line_summary));
    if (content_isAcceptablePosting($posting->content_id)) {
      $thread = createLink("forums-specific-thread.php?view_forum=" . $forum_object->content_id . "&f_id=" . $posting->content_id,
			 unstripTags($posting->one_line_summary));
    } else {
      $thread = "Thread was removed.";
    }
  } else {
    $thread_object = content_getPosting($posting->refers_to);
    $forum_object = content_getForum($thread_object->refers_to);
    if (content_isAcceptablePosting($thread_object->content_id)) {
      $thread = createLink("forums-specific-thread.php?view_forum=" . $forum_object->content_id . "&f_id=" . $thread_object->content_id,
	  		   unstripTags($thread_object->one_line_summary));
    } else {
      $thread = "Thread was removed.";
    }
    $forum = createLink("forums-specific-forum?view_forum=" . $forum_object->content_id, unstripTags($forum_object->one_line_summary));
  }

  return compact("subject", "authorlink", "author", "date", "body", "admin_link", "anchor_name", "bgcolor", "thread", "forum", "ed_color", "anchorname");
}

// Pre: Takes $posting which represents a posting object.
// Post: Returns a string representing that posting as a question
function content_generateQuestionView($posting) {
  $template_variables = internal_generatePostingTemplateData($posting);
  return evalTemplate("mod-content/forum-question.template", $template_variables);
}

// Pre: Takes $posting which represents a posting object.
// Post: Returns a string representing that posting as an answer
function content_generateAnswerView($posting) {
  $template_variables = internal_generatePostingTemplateData($posting);
  return evalTemplate("mod-content/forum-answer.template", $template_variables);
}

// Pre: Takes $posting which represents a posting object.
// Post: Returns a string representing that posting as a generic posting
function content_generatePostingView($posting) {
  $template_variables = internal_generatePostingTemplateData($posting);
  return evalTemplate("mod-content/forum-posting.template", $template_variables);
}

// Pre: Takes $postings which represents a list of answers.
// Post: Returns a string representing those postings as a set of answers.
function content_generateAllAnswersView($postings) {
  $list_of_answers = '';
  if ($postings) {
    foreach ($postings as $posting) {
      $list_of_answers .= content_generateAnswerView($posting);
    }
  }
  $template_variables = compact("list_of_answers");
  return evalTemplate("mod-content/forum-allanswers.template", $template_variables);
}

// Pre: Takes $question_and_answers which is an array of "question" and "answers" representing the question and answers 
// from the database
// $sourcepage is the sourcepage that the forum gets displayed on. It should already have the "?" at the end of it.
// It should be relative to the server root.
// $source_forum_id is the id of the forum the question goes with.
// Post: Returns a string representing the entire set of questions and answers. 
function content_generateThread($questions_and_answers, $sourcepage, $source_forum_id) {
  $forum = content_getForum($source_forum_id);
  $forumtitle = unstripTags($forum->one_line_summary);
  $forum_link = $sourcepage . "&view_forum=" . $source_forum_id;
  $answers = $questions_and_answers["answers"];
  $question = $questions_and_answers["question"];
  $questionview = content_generateQuestionView($question);
  $answersview = content_generateAllAnswersView($answers);
  if (isLoggedIn()) {
    $reply = evalTemplate("mod-content/forum-create-post.template", array("subjectline" => "Re: " . unstripTags($question->one_line_summary),
									"replymessage" => "Reply",
									"refers_to" => $question->content_id,
 									"sourcepage" => $sourcepage));
  } else {
    $reply = "<TR>\n  <TD><FONT SIZE=\"4\">To Post Answers Please Login</FONT></TD>\n</TR>\n<TR>\n  <TD>" .
	     "</TD>\n<TR>\n";
  }
									
  $template_variables = compact("questionview", "answersview", "reply", "forumtitle", "forum_link");
  return evalTemplate("mod-content/forum-question-and-answer.template", $template_variables);
}

// Pre: Takes $forum_id which corresponds to a forum. 
// Assumes that $forum_id is a real forum in the database.
// Post: Returns a forum object representing the forum
function content_getForum($forum_id) {
  $querystring = "SELECT * from content_raw, live_versions WHERE content_raw.content_id=live_versions.content_id AND " .
		 "content_raw.content_id='$forum_id' AND content_type='forum'";
  return query_one_row($querystring);
}

// Pre: Takes $group_id which corresponds to a group.
// Post: Returns the group's forum in the database.
function content_getGroupForum($group_id) {
  $querystring = "SELECT *
		    FROM content_raw, live_versions
		    WHERE content_raw.content_id=live_versions.content_id AND
			  content_type='forum' AND
		          group_owner='$group_id'";
  return query_one_row($querystring);
}

// Pre: Takes $posting_id which corresponds to a question.
// Post: Returns a posting object representing the posting.
function content_getPosting($posting_id) {
  $querystring = "SELECT * FROM content_raw, live_versions WHERE content_raw.content_id=live_versions.content_id AND " .
		 "content_raw.content_id='$posting_id' AND content_type='forum_posting'";
  return query_one_row($querystring);
}

// Pre: Checks to see if $content_id corresponds to a valid forum.
// Post: Returns true or false.
function content_isForum($content_id) {
  $querystring = "SELECT content_id from content_raw WHERE content_type='forum' " .
            	 "AND content_id='$content_id'";
  return query_one_row($querystring);
}

// Pre: Checks to see if $content_id corresponds to a valid posting.
// Post: Returns true or false.
function content_isPosting($content_id) {
  $querystring = "SELECT content_id from content_raw WHERE content_type='forum_posting' " .
            	 "AND content_id='$content_id'";
  return query_one_row($querystring);
}

// Pre: Checks to see if $content_id corresponds to a valid posting that is not rejected or expired.
// If the user is logged in as an administrator, they can see rejected content.
// Post: Returns true or false.
function content_isAcceptablePosting($content_id) {
  if (isAdmin())
    $add_on = " OR editorial_status='rejected'";
  else
    $add_on = '';
  $querystring = "SELECT content_raw.content_id from content_raw, live_versions WHERE content_type='forum_posting' " .
            	 "AND content_raw.content_id='$content_id' AND content_raw.content_id=live_versions.content_id " . 
		 " AND (editorial_status='submitted' OR editorial_status='approved' $add_on)";
  return (query_one_row($querystring));
}

// Pre: Given $question_id, which is a valid id of a question in a forum
// Post: Returns an array containing "question" which is the query with the corresponding content_id,
// and "answers" which is a subarray containing a set of all pieces of content that refer to that question.
// $sourcepage is the sourcepage that the forum gets displayed on. It should already have the "?" at the end of it.
// It should be relative to the server root.
function content_getQuestionAndAnswers($question_id) {
  // Get the question out.
  if (isAdmin()) {
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
		 "content_type='forum_posting' AND editorial_status != 'expired' AND " .
		 "content_raw.content_id='$question_id' AND users.user_id=content_raw.creation_user ORDER BY version_date DESC";
  } else {
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' AND editorial_status != 'rejected' AND editorial_status != 'expired' AND " .
		   "content_raw.content_id='$question_id' AND users.user_id=content_raw.creation_user ORDER BY version_date DESC";
  }
  $question = query_one_row($querystring);

  // Get the answers out.
  if (isAdmin()) {
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' AND editorial_status != 'expired' " . 
		   "AND users.user_id=content_raw.creation_user AND refers_to='" . $question->content_id . 
		   "' ORDER BY version_date DESC";
  } else {
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' AND editorial_status != 'rejected' AND editorial_status != 'expired' " . 
		   "AND users.user_id=content_raw.creation_user AND refers_to='" . $question->content_id . 
		   "' ORDER BY version_date DESC";
  }
  $results = query_multi_row($querystring);
  
  while ($posting = get_row_from_multi_row($results)) {
    if ($posting->content_id)
      $answers[] = $posting;
  }

  return array("question" => $question, "answers" => $answers);
}

// Pre: $creation_user is the author of the posting, $refers_to is the content this refers to
// (an answer to a question, or a forum), $one_line_summary is the short subject line, and 
// $body is the full body of the message.
// Post: Adds a message to a message board.
function content_insertPosting($creation_user, $refers_to, $one_line_summary, $body) {
  $creation_date = $GLOBALS['current_date'];
  $mime_type = "text/plain";
  $content_type = "forum_posting";
  $version_date = $GLOBALS['current_date'];
  $language = "en";
  $editorial_status = "submitted";
  $current_version_p = "t";

  $querystring0 = "SELECT group_owner, viewable_status FROM content_raw WHERE content_id='$refers_to'";
  $referred_content = query_one_row($querystring0);
  $group_owner = $referred_content->group_owner;
  $viewable_status = $referred_content->viewable_status;
    
  if ($group_owner == "") {
    $querystring1 = "INSERT INTO content_raw (content_type, refers_to, creation_user, creation_date, " .
                 "mime_type, viewable_status) VALUES ('$content_type', '$refers_to', " . 
		 "'$creation_user', '$creation_date', '$mime_type', '$viewable_status')";
  } else {
    $querystring1 = "INSERT INTO content_raw (content_type, refers_to, group_owner, creation_user, creation_date, " .
                 "mime_type, viewable_status) VALUES ('$content_type', '$refers_to', '$group_owner', " . 
		 "'$creation_user', '$creation_date', '$mime_type', '$viewable_status')";
  }
  query_perform($querystring1);  

  $sequelquery = "SELECT currval('content_raw_content_id_seq')";
  $content_id = query_one_val($sequelquery);
  $querystring2 = "INSERT INTO content_versions (content_id, version_date, language, one_line_summary, " . 
                  "body, editorial_status, current_version_p) VALUES ('$content_id', '$version_date', '$language', " .
                  "'$one_line_summary', '$body', '$editorial_status', '$current_version_p')";
  query_perform($querystring2);
}

// Pre: Assumes $forum_id is the id for a legitimate forum. $_GET['f_id'] can also be set.
// If that is set, this will display that instead. That is how pages can get reloaded showing
// Different things.
// $sourcepage is the sourcepage that the forum gets displayed on. It should already have the "?" at the end of it.
// It should be relative to the server root.
// Post: Returns a string representing the forum information to be displayed. 
function content_displayForum($forum_id, $sourcepage) {
  if (isset($_GET['f_id'])) {
    $content_id = stripAllTags($_GET['f_id']);
//    if (isForum($content_id)) {
//      return content_generateAllThreads(content_getForum($content_id), $sourcepage);
    if (content_isAcceptablePosting($content_id)) {
      $temp = content_getQuestionAndAnswers($content_id);
      return content_generateThread($temp, $sourcepage, $forum_id);
    } else {
      return content_generateAllThreads(content_getForum($forum_id), $sourcepage);
    }
  } else {
    return content_generateAllThreads(content_getForum($forum_id), $sourcepage);
  }
}

// Pre: Nothing
// Post: Returns a list of forum objects representing forums.
function content_getListOfNonGroupForums() {
  $querystring = "SELECT * 
		    FROM content_raw, live_versions 
		    WHERE live_versions.content_id=content_raw.content_id AND 
      	                  editorial_status='approved' AND 
			  content_type='forum' AND 
			  group_owner IS NULL AND
			  viewable_status='public'
		    ORDER BY one_line_summary";
  $results =  query_multi_row($querystring);
  while ($temp = get_row_from_multi_row($results)) {
    if (isset($temp->content_id))
      $obj_results[] = $temp;
  }
  if ($obj_results) {
    foreach ($obj_results as $forum)
      $forums[] = $forum;
  }
  return $forums;
}

// Pre: Takes $forums, which is a list of forum objects. $sourcepage is a sourcepage with the
// usual restrictions (see the last billion pre statements...it's late)
// Post: Returns a string that represents the forum objects.
function content_viewListOfForums($forums, $sourcepage) {
  $list_of_forums = '';
  if ($forums) {
    foreach ($forums as $forum) {
      $forum_name = unstripTags($forum->one_line_summary);
      $forum_description = unstripTags($forum->description);
      $forum_link = $sourcepage . "&view_forum=" . $forum->content_id;
      if (isAdmin()) {
        $view_unmod_link = createLink("forum-view-postings?select_postings=by_forum&forums=" . $forum->content_id . 
					"&submitted=on", 
			              "View Unmoderated Postings");
        $delete_forum_link = createLink("forum-delete-submit?forum_id=" . $forum->content_id, 
					"Delete Forum");
        $template_variables = compact("view_unmod_link", "delete_forum_link");
        $admin_options = evalTemplate("mod-content/forum-forumlist-forum-admin-options.template", $template_variables);
      } else {
        $admin_options = '';
      }
      $template_variables = compact("forum_name", "forum_description", "forum_link", "admin_options");
      $list_of_forums .= evalTemplate("mod-content/forum-forumlist-forum.template", $template_variables);
    }
  } else {
    $list_of_forums .= "No forums exist.";
  }
  if (isAdmin()) {
    $template_variables = compact();
    $admin_options = evalTemplate("mod-content/forum-forumlist-admin-options.template", $template_variables);
  } else {
    $admin_options = '';
  }
 
  $template_variables = compact("list_of_forums", "admin_options");
  return evalTemplate("mod-content/forum-forumlist.template", $template_variables);
}

// Pre: $one_line_summary and $description are optional variables that have default
// values for those paramters if set.
// Post: Returns the form that lets the user create forums.
function content_adminForumView($one_line_summary, $description) {
  $variable_mapping = compact("one_line_summary", "description");
  $createforum = evalTemplate("mod-content/forum-create-forum.template", $variable_mapping);
  $template_variables = array('createforum' => $createforum);
  return evalTemplate("mod-content/forum-adminterface.template", $template_variables);
}

// Pre: $one_line_summary and $description are variables that have the values neccessary
// to create a forum of that name. $public is whether the form should be public or private.
// $group_owner is the id of a group which only needs to be set if public is false. 
// Post: Creates the forum
function content_createForum($one_line_summary, $description, $public, $group_owner = '') {
    $creation_date = $GLOBALS['current_date'];
    $creation_user = getUserID($_SESSION['user']);
    if ($public == true) {
      $viewable_status = "public";
      $sequelquery = "INSERT INTO content_raw (content_type, creation_user, creation_date, viewable_status) VALUES " .
		   "('forum', '$creation_user', '$creation_date', '$viewable_status')";
    } else {
      $viewable_status = "private";
      $sequelquery = "INSERT INTO content_raw (content_type, creation_user, creation_date, viewable_status, group_owner) VALUES " .
	   	     "('forum', '$creation_user', '$creation_date', '$viewable_status', '$group_owner')";
    }
    query_perform($sequelquery);
    $sequelquery = "SELECT currval('content_raw_content_id_seq')";
    $content_id = query_one_val($sequelquery);
    $version_date = $creation_date;
    $language = "en";
    $editorial_status = "approved";
    $editorial_status_date = $creation_date;
    $sequelquery = "SELECT user_id FROM users WHERE user_name='" . $_SESSION['user'] . "'";
    $result = pg_fetch_array(pg_query($sequelquery));
    $editor_id = $result[0];
    $sequelquery = "INSERT INTO content_versions (content_id, version_date, language, one_line_summary, " .
		   "editorial_status, editor_id, editorial_status_date, current_version_p, description) VALUES ('$content_id', " .
		   "'$version_date', '$language', '$one_line_summary', '$editorial_status', '$editor_id', '$editorial_status_date', 't', " .
		   "'$description')";
    query_perform($sequelquery);
}

// Pre: $forum_id is the forum_id of a valid forum
// Post: Soft Deletes the forum
function content_deleteForum($forum_id) {
//  $querystring = "SELECT user_id FROM users WHERE user_name='" . stripAllTags(currentUser()) . "'";
//  $user = query_one_row($querystring);
//  $user_id = $user->user_id;
  $user_id = getUserID(currentUser());
  $querystring = "UPDATE content_versions SET editorial_status='rejected', editor_id='$user_id', " .
		 "editorial_status_date='" . $GLOBALS['current_date'] . "' WHERE " . 
 		 "content_id='$forum_id'";
  query_perform($querystring);

  $querystring = "UPDATE content_raw SET group_owner=NULL WHERE content_id='$forum_id' AND content_type='forum'";
  query_perform($querystring);
}

// Pre: $userid is a valid user id
// $editorialdata is a subquery that can be inserted into a sequel query to limit content to certain editorial types.
// Post: Returns a list of all postings by that user.
function content_getPostingsOfUser($userid, $editorialdata) {
  $querystring = "SELECT * FROM content_raw, live_versions WHERE content_raw.content_id=live_versions.content_id AND " .
    "content_type='forum_posting' AND content_raw.creation_user='$userid' " . $editorialdata .  
    " ORDER BY version_date DESC";
  $postings = query_multi_row($querystring);
  return $postings;
}

// Pre: $days is a number greater than or equal to zero representing the most days that can have
// past before a user account was created.
// $editorialdata is a subquery that can be inserted into a sequel query to limit content to certain editorial types.
// Post: Returns all postings by recent users created within that last amount of time.
function content_getPostingsOfNewUsers($days, $editorialdata) {
  $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
    "content_type='forum_posting' AND content_raw.creation_user=users.user_id " . $editorialdata . " AND " .
    "age(date_joined)<interval '" . $days . " days' ORDER BY version_date LIMIT 100";
  $postings = query_multi_row($querystring);
  return $postings;
}

// Pre: Takes a $forum, which is an object representing a forum
// it should have the fields content_id.
// $editorialdata is a subquery that can be inserted into a sequel query to limit content to certain editorial types.
// Post: Returns an array containing posting objects, which represent postings.
function content_getPostingsByForum($forum, $editorialdata) {
  $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
		 "content_type='forum_posting' AND " .
		 "refers_to='" . $forum->content_id . "' AND users.user_id=content_raw.creation_user ORDER BY version_date";
  $results = query_multi_row($querystring);
  while ($posting = get_row_from_multi_row($results)) {
    if ($posting->content_id)
      $postings[] = $posting;
  }
  if ($postings) {
    // Get the answers out.
    $querystring = "SELECT * FROM content_raw, live_versions, users WHERE content_raw.content_id=live_versions.content_id AND " .
	  	   "content_type='forum_posting' " . $editorialdata . 
		   "AND users.user_id=content_raw.creation_user AND (";
    foreach ($postings as $question) {
      $addstring[] = "refers_to='" . $question->content_id . "'";
    }
  
    $querystring .= implode(' OR ', $addstring);
    $querystring .= ") ORDER BY version_date";
    $results = query_multi_row($querystring);
    
    while ($posting = get_row_from_multi_row($results)) {
      if ($posting->content_id)
        $postings[] = $posting;
    }
  }
  if ($postings) foreach ($postings as $key => $posting) {
    if (!(strstr($editorialdata, $posting->editorial_status)))
      unset($postings[$key]);
  }
  return $postings;
}

// Pre: Takes a $userid that is a valid userid on the system.
// Post: Marks all posts by that user as rejected.
function content_rejectAllPostingsByUser($userid) {
  $querystring = "UPDATE content_versions SET editorial_status='rejected' WHERE content_raw.creation_user='$userid' AND content_raw.content_id=content_versions.content_id AND content_raw.content_id='forum_posting'";
  query_perform($querystring);
  // MATT - We need to figure out how to delete all the other postings efficiently.
}

// Pre: Takes a $posting, which represents some message
// Post: Rejects all postings which refer to that message.
function internal_rejectSubPostings($posting) {
  $querystring = "UPDATE content_versions SET editorial_status='rejected' WHERE content_raw.content_id=content_versions.content_id 
		  AND content_raw.refers_to='" . $posting->content_id . "'";
  query_perform($querystring);
}